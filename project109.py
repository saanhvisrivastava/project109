# -*- coding: utf-8 -*-
"""project109.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jbzr3DuN4P6bCQ85jR2Qy_JCbmQFJI4_
"""

import random
import statistics
import plotly.figure_factory as ff
import pandas as pd

df=pd.read_csv("StudentsPerformance.csv")
data=df["math score"].tolist()
print(data)

mean=sum(data)/len(data)
print("The mean of dice dataset is ",mean)

median=statistics.median(data)
print("the median of dice dataset is",median)

mode=statistics.mode(data)
print("Mode of dice dataset is",mode)

std_deviation=statistics.stdev(data)
print("standard deviation",std_deviation)

first_std_deviation_start,first_std_deviation_end=mean-std_deviation,mean+std_deviation
listofdatawithinfirststddeviation=[result for result in data if
                                   result>first_std_deviation_start and 
                                   result< first_std_deviation_end
                                   ]
print("{}%of data lies within firststandarddeviation".format(len(listofdatawithinfirststddeviation)*100.0/len(data)))                         

secondstddeviationstarts,secondstddeviationends= mean-(2*std_deviation),mean+(2*std_deviation)
listofdatawithinsecondstddeviation=[result for result in data 
                                    if result>secondstddeviationstarts and
                                    result< secondstddeviationends
                                    ]
print("{}% of data lies within secondstandarddeviation".format(len(listofdatawithinsecondstddeviation)*100.0/len(data)))

thirdstddeviationstarts,thirdstddeviationends= mean-(3*std_deviation),mean+(3*std_deviation)
listofdatawithinthirdstddeviation=[result for result in data 
                                    if result>thirdstddeviationstarts and
                                    result< thirdstddeviationends
                                    ]
print("{}% of data lies within thirdstandarddeviation".format(len(listofdatawithinthirdstddeviation)*100.0/len(data)))


fig=ff.create_distplot([data],["result" ],show_hist=False)
fig.show()